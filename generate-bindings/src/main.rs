use serde_json::Value;
use std::fmt::Write;
use std::fs::File;
use std::{env, path::Path};

const HEADER_BASE: &str = "/*
* This file is automatically generated upon running
* `cargo +nightly build`. Do not modify by hand.
*/";

fn main() {
    let this_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
    let this_dir = Path::new(&this_dir);
    let target_lib_dir = this_dir.parent().unwrap().join("rcrypto-sys");

    let json_path = rustdoc_json::Builder::default()
        .toolchain("nightly")
        .manifest_path(target_lib_dir.join("Cargo.toml"))
        .build()
        .unwrap();

    let reader = File::open(json_path).unwrap();
    let json: Value = serde_json::from_reader(reader).unwrap();

    let index = json.as_object().unwrap()["index"].as_object().unwrap();
    let consts = index
        .values()
        .filter(|v| v.get("visibility").map(|v| v.as_str().unwrap()) == Some("public"))
        .filter_map(|v| {
            // Messy, but we first check if `entry.inner.constant` exists (indicating a constant)
            // then pair that constant's value with its name
            v.get("inner")
                .and_then(|v| v.as_object().unwrap().get("constant"))
                .map(|c| {
                    (
                        v.get("name").unwrap().as_str().unwrap(),
                        c.get("value").unwrap().as_str().unwrap(),
                    )
                })
        });

    let mut header = HEADER_BASE.to_owned();
    header.push('\n');

    for (cname, cval) in consts {
        // We only focus on integers, so trim the suffix from e.g. `0usize`;
        let new_cval = cval.trim_end_matches(char::is_alphabetic);

        writeln!(header, "#define {cname} {new_cval}").unwrap();
    }

    let outfile = this_dir.parent().unwrap().join("rcrypto.h");
    cbindgen::Builder::new()
        .with_crate(target_lib_dir)
        .with_no_includes()
        .with_sys_include("stdint.h")
        .with_parse_expand(&["rcrypto-sys"])
        .with_language(cbindgen::Language::C)
        .with_cpp_compat(true)
        .with_header(header)
        .generate()
        .expect("failed to generate C bindings")
        .write_to_file(&outfile);

    eprintln!("wrote bindings to {}", outfile.display());
}
