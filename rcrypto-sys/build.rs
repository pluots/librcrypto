use std::fmt::Write;
use std::path::{Path, PathBuf};
use std::{env, fs};

fn main() {
    update_tests();
}

const TEST_PREFIX: &str = "// autogenerated file, do not edit manually
// one test is generated for each `.c` file

";

#[cfg(windows)]
const EXE_EXTENSION: &str = "exe";
#[cfg(not(windows))]
const EXE_EXTENSION: &str = "out";

/// Autogenerate an integration test for every `.c` file
/// Make builds the tests, we just invoke them
fn update_tests() {
    let crate_dir = Path::new(env!("CARGO_MANIFEST_DIR"));
    let out_dir = PathBuf::from(&env::var("OUT_DIR").unwrap());
    let out_file = out_dir.join("auto_suite.rs");
    let test_dir = crate_dir.join("tests");
    let test_paths = fs::read_dir(test_dir).unwrap();

    let mut to_write = TEST_PREFIX.to_owned();

    for path in test_paths {
        let path = path.unwrap().path();
        let fname = path.file_name().unwrap().to_string_lossy();
        if !fname.ends_with(".c") {
            continue;
        }

        let test_name = fname.strip_suffix(".c").unwrap().replace('-', "_");
        let mut exe_path = out_dir.clone();
        exe_path.extend(["c-out", &format!("test_{test_name}.{EXE_EXTENSION}")]);
        let exe_path_str = exe_path.to_string_lossy();
        // escape backslashes
        let exe_path_str = exe_path_str.replace('\\', "\\\\");

        indoc::writedoc!(
            to_write,
            "

                #[test]
                fn test_{test_name}() {{
                    run_setup();
                    let mut cmd = Command::new(\"{exe_path}\");
                    run_cmd_else_quit(&mut cmd, \"{fname}\");
                }}
            ",
            test_name = test_name,
            exe_path = exe_path_str,
            fname = fname,
        )
        .unwrap();
    }

    fs::write(out_file, to_write).unwrap();
}
